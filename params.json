{
  "name": "SuccincT",
  "tagline": "Discriminated unions, pattern matching and functional composition for C#",
  "body": "## Succinc\\<T\\> ##\r\n#### Discriminated unions, pattern matching and partial applications for C#  ####\r\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/DavidArno/Succinct?svg=true)](https://ci.appveyor.com/project/DavidArno/succinct) &nbsp;[![NuGet](https://img.shields.io/nuget/v/SuccincT.svg)](http://www.nuget.org/packages/SuccincT)\r\n----------\r\n### Introduction ###\r\nSuccinc\\<T\\> is a small .NET framework that started out as a means of providing an elegant solution to the problem of functions that need return a success state and value, or a failure state. Initially, it consisted of a few `Parse` methods that returned an `ISuccess<T>` result. Then I started learning F#...\r\n\r\nNow Succinc\\<T\\> has grown into a library that provides discriminated unions, pattern matching and partial applications for C#, in addition to providing a set of value parsers that do away with the need for `out` parameters and exceptions, and instead return return an `Option<T>`.\r\n\r\n### Current Release ###\r\nThe current release of Succinc\\<T\\> is 1.6.0, which is [available as a nuget package](https://www.nuget.org/packages/SuccincT/). \r\n\r\nThis release [implements a new way of pattern matching unions](https://github.com/DavidArno/SuccincT/issues/5), using `CaseOf<type>`. Please see the [union pattern matching page for more details](https://github.com/DavidArno/SuccincT/wiki/PatternMatchingUnions).\r\n\r\n### Features ###\r\n#### Discriminated Unions ####\r\nSuccinc\\<T\\> provides a set of union types ([`Union<T1, T2>`](https://github.com/DavidArno/SuccincT/wiki/UnionT1T2), [`Union<T1, T2, T3>`](https://github.com/DavidArno/SuccincT/wiki/UnionT1T2T3) and [`Union<T1, T2, T3, T4>`](https://github.com/DavidArno/SuccincT/wiki/UnionT1T2T3T4)) where an instance will hold exactly one value of one of the specified types. In addition, it provides the likes of [`Option<T>`](https://github.com/DavidArno/SuccincT/wiki/Option_T_) that can have the value `Some<T>` or `None`.\r\n\r\nSuccinc\\<T\\> uses [`Option<T>`](https://github.com/DavidArno/SuccincT/wiki/Option_T_) to provide replacements for the .NET basic types' `TryParse()` methods and `Enum.Parse()`. In all cases, these are extension methods to `string` and they return `Some<T>` on a successful parse and `None` when the string is not a valid value for that type. No more `out` parameters!\r\n\r\n#### Pattern Matching ####\r\nSuccinc\\<T\\> can pattern match values, unions etc in a way similar to F#'s pattern matching features. It uses a fluent syntax to achieve this as shown by the following example:\r\n```csharp\r\npublic static void PrintColorName(Color color)\r\n{\r\n    color.Match()\r\n         .With(Color.Red).Do(x => Console.WriteLine(\"Red\"))\r\n         .With(Color.Green).Do(x => Console.WriteLine(\"Green\"))\r\n         .With(Color.Blue).Do(x => Console.WriteLine(\"Blue\"))\r\n         .Exec();\r\n}\r\n```\r\n\r\nSee the [Succinc\\<T\\> pattern matching guide](https://github.com/DavidArno/SuccincT/wiki/PatternMatching) for more details.\r\n\r\n#### Partial Applications ####\r\nSuccinc\\<T\\> supports partial function applications. A parameter can be supplied to a multi-parameter method and a new function will be returned that takes the remaining parameters. For example:\r\n\r\n```csharp\r\nFunc<int,int,int> times = (p1, p2) => p1 * p2;\r\nvar times8 = times.Apply(8);\r\nvar result = times8(9); // <- result == 72\r\n```\r\n\r\nSee the [Succinc\\<T\\> partial applications guide](https://github.com/DavidArno/SuccincT/wiki/PartialFunctionApplications) for more details.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}